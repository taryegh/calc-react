{"version":3,"sources":["components/Button.jsx","App.jsx","components/Input.jsx","components/Label.jsx","components/ClearButton.jsx","components/Beta.jsx","serviceWorker.js","index.js"],"names":["isOperator","val","isNaN","Button","props","className","children","onClick","handleClick","value","App","state","input","setState","handleEqual","eval","handleSQRT","Math","sqrt","handlePercent","handleNone","console","log","this","handleClear","Component","Input","Label","ClearButton","Beta","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f92d66d8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Button.css\";\n\nconst isOperator = val => {\n  return !isNaN(val) || val === \".\" || val === \"=\";\n};\n\nexport default function Button(props) {\n  return (\n    <div\n      className={`button-wrapper ${\n        isOperator(props.children) ? null : \"operator\"\n      }`}\n      onClick={() => props.handleClick(props.value)}\n    >\n      {props.children}\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Button from \"./components/Button\";\nimport Input from \"./components/Input\";\nimport Label from \"./components/Label\";\nimport ClearButton from \"./components/ClearButton\";\nimport * as mat from \"mathjs\";\nimport Beta from \"./components/Beta\";\n\nclass App extends Component {\n  state = {\n    input: \"\"\n  };\n\n  handleClick = val => {\n    this.setState({ input: this.state.input + val });\n  };\n\n  handleEqual = () => {\n    this.setState({ input: eval(this.state.input) });\n  };\n\n  handleSQRT = () => {\n    this.setState({ input: Math.sqrt(+this.state.input) });\n  };\n\n  handlePercent = () => {\n    this.setState({ input: +this.state.input / 100 });\n  };\n\n  handleNone = () => {\n    console.log(null);\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"calc-wrapper\">\n          <Input input={this.state.input} />\n          <Label />\n          <div className=\"row\">\n            {/* MINUS */}\n            <Button handleClick={this.handleClick} value=\"-\">\n              +-\n            </Button>\n\n            {/* SQRT */}\n            <Button handleClick={this.handleSQRT}>√</Button>\n\n            {/* MU */}\n            <Button handleClick={this.handleNone}>MU</Button>\n\n            {/* % */}\n            <Button handleClick={this.handlePercent}>%</Button>\n\n            {/* ON */}\n            <ClearButton handleClear={() => this.setState({ input: \"\" })}>\n              ON\n            </ClearButton>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.handleClick} value=\"7\">\n              7\n            </Button>\n            <Button handleClick={this.handleClick} value=\"8\">\n              8\n            </Button>\n            <Button handleClick={this.handleClick} value=\"9\">\n              9\n            </Button>\n\n            {/* MUL */}\n            <Button handleClick={this.handleClick} value=\"*\">\n              X\n            </Button>\n\n            {/* DIVISION */}\n            <Button handleClick={this.handleClick} value=\"/\">\n              ÷\n            </Button>\n          </div>\n\n          <div className=\"row\">\n            <Button handleClick={this.handleClick} value=\"4\">\n              4\n            </Button>\n            <Button handleClick={this.handleClick} value=\"5\">\n              5\n            </Button>\n            <Button handleClick={this.handleClick} value=\"6\">\n              6\n            </Button>\n            <Button handleClick={this.handleClick} value=\"-\">\n              -\n            </Button>\n            <Button handleClick={this.handleNone}>MR</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.handleClick} value=\"1\">\n              1\n            </Button>\n            <Button handleClick={this.handleClick} value=\"2\">\n              2\n            </Button>\n            <Button handleClick={this.handleClick} value=\"3\">\n              3\n            </Button>\n            <Button handleClick={this.handleClick} value=\"+\">\n              +\n            </Button>\n            <Button handleClick={this.handleNone}>M-</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.handleClick} value=\"0\">\n              0\n            </Button>\n            <Button handleClick={this.handleClick} value=\".\">\n              .\n            </Button>\n            <Button handleClick={() => this.handleEqual()}>=</Button>\n            <Button handleClick={this.handleClick} value=\"+\">\n              +\n            </Button>\n            <Button handleClick={this.handleNone}>M+</Button>\n          </div>\n        </div>\n        <br />\n        <Beta />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport \"./Input.css\";\n\nexport default function Input(props) {\n  return <div className=\"input\">{props.input}</div>;\n}\n","import React from \"react\";\nimport \"./Label.css\";\n\nexport default function Label() {\n  return (\n    <div className=\"label\">\n      <div className='citizen'>citizen</div>\n      <div className='model'>lh-700</div>\n      <div className='solar'></div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport \"./ClearButton.css\";\n\nexport default function ClearButton(props) {\n  return (\n    <div className=\"clear-btn\" onClick={props.handleClear}>\n      {props.children}\n    </div>\n  );\n}\n","import React from 'react'\n\nexport default function Beta() {\n  return (\n    <div className='beta'>\n      <h5>Beta: In a testing condition. Crashes may occur.</h5>\n    </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}